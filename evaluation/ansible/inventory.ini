[all:vars]

# use root user directly for hetzner hosts
ansible_user=root

# letsencrypt account
letsencrypt_agree_tos=False #! TODO
letsencrypt_account=webmaster@example.com #! TODO

# encrypted hetzner tokens
hetzner_tokens=files/hetzner_token.sops.yaml

# can use existing certificate to avoid acme ratelimiting
# encrypt and put them in existing_brokercert, containing PEM-encoded
# strings for cert, chain, fullchain, privkey
use_existing_brokercert=False
existing_brokercert=files/broker_certificate.sops.yaml

# relative directories for binaries, results etc.
pwd_broker="../../broker" # wasimoff broker
pwd_webprovider="../../webprovider" # wasimoff webprovider dist
pwd_tsp="../../wasi-apps/travelling_salesman" # tsp binary
pwd_locustfiles="../eval_throughput/workload_*.py" # locust workloads
pwd_results="../eval_throughput/results" # put locust logs here

# entrypoint (ip) address for wasimoff and serverledge
broker="{{ hostvars[groups['broker'][0]]['inventory_hostname'] }}"
serverledge="{{ hostvars[groups['broker'][0]]['ansible_default_ipv4']['address'] }}"

# archive with compiled serverledge binaries
serverledge_zip=files/serverledge_binaries.zip

# put all serverledge nodes into the same region so loadbalancer can discover them
serverledge_region=HETZNER

# uncomment server definitions at the bottom of this file!


# CLUSTER DEFINITIONS:
# --------------------
# 1. uncomment and modify locust, broker and provider groups as needed
# 2. create servers with ./01-create-servers.yaml playbook
# 3. setup servers with ./02-setup-{wasimoff,serverledge}.yaml playbooks
# 4. run workload from locust
#
# available locations:
# --------------------
#   - fsn1 (Falkenstein, DE)
#   - nbg1 (Nuremberg, DE)
#   - hel1 (Helsinki, FI)
#   - ash  (Ashburn, US east)
#   - hil  (Hillsboro, US west)
#
# useful server types with dedicated cpus:
# ----------------------------------------
#   - ccx13 (  2c,   8gb )
#   - ccx23 (  4c,  16gb )
#   - ccx33 (  8c,  32gb )
#   - ccx43 ( 16c,  64gb )
#   - ccx53 ( 32c, 128gb )
#   - ccx63 ( 48c, 192gb )
#
# scenarios (always repeat n={8,10}!):
# ------------------------------------
# - "many-tiny":  many ccx13 nodes, all providers in same region
#    - optimal: everything in the same region
#    - badconn: locust in some US region
#    - worstcase: US – Europe – and back
# - "many-medium" (lom): same as above, with ccx33 nodes
#    - repeat provider location spread as above
# - "geospread": providers in four regions, 4..32:4 · ccx13 nodes
# - "biglittle": same core count spread onto different sized nodes
#

# construct a "scenario" string from server locations and configuration
# the locust run results will be saved in a subdirectory of this name
hc_loc_locust="nbg1"
hc_loc_broker="fsn1"
hc_loc_provds="fsn1"
hc_provds_types="ccx43"
hc_provds_string="04x16c-cpu1"
scenario="{{ hc_loc_locust }}-{{ hc_loc_broker }}-{{ hc_loc_provds }}/{{ hc_provds_string }}"

# workload configuration for locust
tsp_n_default=10
locust_run_time="180s"
locust_users="64"


# lots of ...

[locust]
broker.ansemjo.de  type=ccx23  location="{{ hc_loc_locust }}"

[broker]
broker.ansemjo.de  type=ccx23  location="{{ hc_loc_broker }}"

[provider:vars]
type="{{ hc_provds_types }}"
location="{{ hc_loc_provds }}"

[provider]
provider[01:04].ansemjo.de


# geospread ...

; [locust]
; locust.ansemjo.de  type=ccx23  location="{{ hc_loc_locust }}"

; [broker]
; broker.ansemjo.de  type=ccx23  location="{{ hc_loc_broker }}"

; [provider]
; # up to 04, 08, 12, 16, 20, 24, 28, 32
; provider[01:04:4].ansemjo.de   type="{{ hc_provds_types }}"  location=fsn1
; provider[02:04:4].ansemjo.de   type="{{ hc_provds_types }}"  location=hel1
; provider[03:04:4].ansemjo.de   type="{{ hc_provds_types }}"  location=ash
; provider[04:04:4].ansemjo.de   type="{{ hc_provds_types }}"  location=hil


# biglitte ...

; [locust]
; locust.ansemjo.de  type=ccx23  location="{{ hc_loc_locust }}"

; [broker]
; broker.ansemjo.de  type=ccx23  location="{{ hc_loc_broker }}"

; [provider:vars]
; location="{{ hc_loc_provds }}"

; [provider]
; # the first is special with [ 48, 16 ] cores
; ; provider01.ansemjo.de  type=ccx63
; ; provider02.ansemjo.de  type=ccx43
; # after that it's equal spreads of [ 2·ccx53, 4·ccx43, 8·ccx33, 16·ccx23, 32·ccx13 ]
; ; provider[01:02].ansemjo.de   type=ccx53
; ; provider[01:04].ansemjo.de   type=ccx43
; ; provider[01:08].ansemjo.de   type=ccx33
; ; provider[01:16].ansemjo.de   type=ccx23
; ; provider[01:32].ansemjo.de   type=ccx13
; # the last is another heterogeneous spread
; ; provider01.ansemjo.de       type=ccx53
; ; provider[02:03].ansemjo.de  type=ccx33
; ; provider[04:11].ansemjo.de  type=ccx13
