# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: proto/v1/messages.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import proto.v1.messages_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class Tasks(Protocol):
    async def RunWasip1(self, req: _pb2.Request, ctx: ServiceContext) -> _pb2.Response: ...
    async def RunWasip1Job(self, req: _pb2.JobRequest, ctx: ServiceContext) -> _pb2.JobResponse: ...
    async def RunPyodide(self, req: _pb2.Request, ctx: ServiceContext) -> _pb2.Response: ...
    async def Upload(self, req: _pb2.Request, ctx: ServiceContext) -> _pb2.Response: ...


class TasksServer(ConnecpyServer):
    def __init__(self, *, service: Tasks, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/wasimoff.v1.Tasks"
        self._endpoints = {
            "RunWasip1": Endpoint[_pb2.Request, _pb2.Response](
                service_name="Tasks",
                name="RunWasip1",
                function=getattr(service, "RunWasip1"),
                input=_pb2.Request,
                output=_pb2.Response,
                allowed_methods=("POST",),
            ),
            "RunWasip1Job": Endpoint[_pb2.JobRequest, _pb2.JobResponse](
                service_name="Tasks",
                name="RunWasip1Job",
                function=getattr(service, "RunWasip1Job"),
                input=_pb2.JobRequest,
                output=_pb2.JobResponse,
                allowed_methods=("POST",),
            ),
            "RunPyodide": Endpoint[_pb2.Request, _pb2.Response](
                service_name="Tasks",
                name="RunPyodide",
                function=getattr(service, "RunPyodide"),
                input=_pb2.Request,
                output=_pb2.Response,
                allowed_methods=("POST",),
            ),
            "Upload": Endpoint[_pb2.Request, _pb2.Response](
                service_name="Tasks",
                name="Upload",
                function=getattr(service, "Upload"),
                input=_pb2.Request,
                output=_pb2.Response,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "wasimoff.v1.Tasks"


class TasksSync(Protocol):
    def RunWasip1(self, req: _pb2.Request, ctx: ServiceContext) -> _pb2.Response: ...
    def RunWasip1Job(self, req: _pb2.JobRequest, ctx: ServiceContext) -> _pb2.JobResponse: ...
    def RunPyodide(self, req: _pb2.Request, ctx: ServiceContext) -> _pb2.Response: ...
    def Upload(self, req: _pb2.Request, ctx: ServiceContext) -> _pb2.Response: ...


class TasksServerSync(ConnecpyServer):
    def __init__(self, *, service: TasksSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/wasimoff.v1.Tasks"
        self._endpoints = {
            "RunWasip1": Endpoint[_pb2.Request, _pb2.Response](
                service_name="Tasks",
                name="RunWasip1",
                function=getattr(service, "RunWasip1"),
                input=_pb2.Request,
                output=_pb2.Response,
                allowed_methods=("POST",),
            ),
            "RunWasip1Job": Endpoint[_pb2.JobRequest, _pb2.JobResponse](
                service_name="Tasks",
                name="RunWasip1Job",
                function=getattr(service, "RunWasip1Job"),
                input=_pb2.JobRequest,
                output=_pb2.JobResponse,
                allowed_methods=("POST",),
            ),
            "RunPyodide": Endpoint[_pb2.Request, _pb2.Response](
                service_name="Tasks",
                name="RunPyodide",
                function=getattr(service, "RunPyodide"),
                input=_pb2.Request,
                output=_pb2.Response,
                allowed_methods=("POST",),
            ),
            "Upload": Endpoint[_pb2.Request, _pb2.Response](
                service_name="Tasks",
                name="Upload",
                function=getattr(service, "Upload"),
                input=_pb2.Request,
                output=_pb2.Response,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "wasimoff.v1.Tasks"


class TasksClient(ConnecpyClient):
    def RunWasip1(
        self,
        *,
        request: _pb2.Request,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Response:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/wasimoff.v1.Tasks/RunWasip1",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Response,
            method=method,
            **kwargs,
        )

    def RunWasip1Job(
        self,
        *,
        request: _pb2.JobRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.JobResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/wasimoff.v1.Tasks/RunWasip1Job",
            ctx=ctx,
            request=request,
            response_obj=_pb2.JobResponse,
            method=method,
            **kwargs,
        )

    def RunPyodide(
        self,
        *,
        request: _pb2.Request,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Response:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/wasimoff.v1.Tasks/RunPyodide",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Response,
            method=method,
            **kwargs,
        )

    def Upload(
        self,
        *,
        request: _pb2.Request,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Response:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/wasimoff.v1.Tasks/Upload",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Response,
            method=method,
            **kwargs,
        )


class AsyncTasksClient(AsyncConnecpyClient):
    async def RunWasip1(
        self,
        *,
        request: _pb2.Request,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Response:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/wasimoff.v1.Tasks/RunWasip1",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Response,
            method=method,
            session=session,
            **kwargs,
        )

    async def RunWasip1Job(
        self,
        *,
        request: _pb2.JobRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.JobResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/wasimoff.v1.Tasks/RunWasip1Job",
            ctx=ctx,
            request=request,
            response_obj=_pb2.JobResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def RunPyodide(
        self,
        *,
        request: _pb2.Request,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Response:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/wasimoff.v1.Tasks/RunPyodide",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Response,
            method=method,
            session=session,
            **kwargs,
        )

    async def Upload(
        self,
        *,
        request: _pb2.Request,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Response:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/wasimoff.v1.Tasks/Upload",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Response,
            method=method,
            session=session,
            **kwargs,
        )
